services:
  api-gateway:
    user: root
    container_name: api-gateway
    build:
      context: ./api-gateway/api-gateway
      dockerfile: Dockerfile
    volumes:
      - ./api-gateway/api-gateway/ocelot.json:/app/ocelot.json
    depends_on:
      - dictionary-parser
      - authorization-module
      - personal-vocab
      - postgres
      - postgres_pv
    ports:
      - "8090:80"
    networks:
      - backend

  dictionary-parser:
    container_name: dictionary-parser
    build:
      context: ./dictionary-parser
      dockerfile: Dockerfile
    depends_on:
      - postgres
    networks:
      - backend

  study-module:
    container_name: study-module
    build:
      context: ./study-module
      dockerfile: Dockerfile
    depends_on:
      - postgres
    networks:
      - backend

  authorization-module:
    container_name: authorization-module
    build:
      context: ./authorization-module
      dockerfile: Dockerfile
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - backend
    environment:
      DB_CONNECTION_STRING: "Server=postgres; Port=5432; Database=auth-module; User Id=postgres; Password=123"

  personal-vocab:
    container_name: personal-vocab
    build:
      context: ./personal-vocab
      dockerfile: Dockerfile
    networks:
      - backend
    depends_on:
      postgres_pv:
        condition: service_healthy
      redis:
        condition: service_started
      inclusive:
        condition: service_started
    environment:
      DB_CONNECTION_STRING: "Server=postgres_pv; Port=5432; Database=personal-vocabulary; User Id=postgres; Password=123"
      REDIS_CONNECTION_STRING: "redis:6379"
      GRPC_INCLUSIVE_ADDRESS: "http://inclusive:40051"

  line-by-line-ui:
    container_name: line-by-line-ui
    build:
      context: ./line-by-line-ui
      dockerfile: Dockerfile
      args:
        API_SERVER_ADDRESS: "http://85.175.218.17:8090"
    ports:
      - "8081:3000"
    networks:
      - backend
    depends_on:
      - api-gateway
    environment:
      NODE_ENV: production
      API_SERVER_ADDRESS: "http://85.175.218.17:8090"

  inclusive:
    container_name: inclusive
    build:
      context: ./inclusive
      dockerfile: Dockerfile
    ports:
      - "40051:40051"
    networks:
      - backend
    healthcheck:
      test: ["CMD", "python", "-c", "import grpc; import sys; channel = grpc.insecure_channel('localhost:40051'); sys.exit(0 if channel else 1)"]
      interval: 10s
      timeout: 5s
      retries: 5

  postgres:
    container_name: postgres
    image: postgres:13
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: 123
      POSTGRES_DB: auth-module
    ports:
      - "5454:5432"
    volumes:
      - postgres-data:/var/lib/postgresql/data
    networks:
      - backend
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  postgres_pv:
    container_name: postgres_pv
    image: postgres:13
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: 123
      POSTGRES_DB: personal-vocabulary
    ports:
      - "5455:5432"
    volumes:
      - postgres-pv-data:/var/lib/postgresql/data
    networks:
      - backend
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    container_name: redis
    image: redis:7
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    networks:
      - backend
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

networks:
  backend:

volumes:
  postgres-data:
  postgres-pv-data:
  redis-data:
